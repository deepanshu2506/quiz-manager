{"version":3,"sources":["logo.svg","components/Login/login.js","config.js","components/QuizPage/QuizPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","React","Component","apiHost","QuizPage","props","state","generateAnswers","bind","onChangeFile","axios","get","this","match","params","id","quizData","data","code","setState","notFound","console","log","quizName","numberOfQuestions","answers","event","file","target","files","index","getAttribute","formData","FormData","append","parseInt","post","response","path","tablerows","i","push","key","src","questionNumber","type","ref","el","onChange","to","App","className","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,iLCQ5BC,E,uKAJX,OAAO,+C,GAFSC,IAAMC,W,gCCFpBC,EAAU,0C,iBCgGDC,G,wDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GACb,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,gMAQTE,IAAMC,IAAIR,EAAO,wBAAoBS,KAAKP,MAAMQ,MAAMC,OAAOC,K,QADjEC,E,OAEFC,MACYC,MACZN,KAAKO,SAAS,CAAEC,UAAU,IAE5BJ,EAAWA,EAASA,SACpBK,QAAQC,IAAIN,GACZJ,KAAKO,SAAS,CACZI,SAAUP,EAASO,SACnBC,kBAAmBR,EAASQ,kBAC5BC,QAAST,EAASS,U,kLAGHC,G,sFACXC,EAAOD,EAAME,OAAOC,MAAM,GAC1BC,EAAQJ,EAAME,OAAOG,aAAa,mBAClCC,EAAW,IAAIC,UACZC,OAAO,OAAQP,GACxBK,EAASE,OAAO,iBAAkBC,SAASL,GAAS,GACpDT,QAAQC,IAAIQ,G,SAEWpB,IAAM0B,KAC3BjC,EAAO,0BAAsBS,KAAKP,MAAMQ,MAAMC,OAAOC,IACrDiB,G,OAFIK,E,QAIAZ,EAAYb,KAAKN,MAAjBmB,SACOK,QACXL,EAAQK,GAAS,IAEnBL,EAAQK,GAAOQ,KAAOD,EAASpB,KAAKqB,KACpC1B,KAAKO,SAAS,CAAEM,YAChBJ,QAAQC,IAAIe,EAASpB,M,gJAMrB,IAHiB,IAAD,SACuBL,KAAKN,MAApCmB,EADQ,EACRA,QAASD,EADD,EACCA,kBACbe,EAAY,GAFA,WAGPC,GAEPD,EAAUE,KACR,wBAAIC,IAAKF,GACP,4BAAKA,EAAI,GACT,4BACGf,EAAQe,GACP,yBAAKG,IAAKlB,EAAQe,GAAGF,OAErB,2BACEM,eAAgBJ,EAChBK,KAAK,OACLC,IAAK,SAACC,GAAD,OAAS,EAAK,GAAD,OAAIP,EAAJ,WAAiBO,GACnCC,SAAU,EAAKvC,mBAblB+B,EAAI,EAAGA,EAAIhB,EAAmBgB,IAAM,EAApCA,GAqBT,OAAOD,I,+BAGP,OAAI3B,KAAKN,MAAMc,SAAiB,kBAAC,IAAD,CAAU6B,GAAG,cAE3C,6BACE,4BAAKrC,KAAKN,MAAMiB,UAChB,+BACE,+BACE,4BACE,oCACA,wCAGHX,KAAKL,wB,GAjFON,IAAMC,YCadgD,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACd,KAAK,SAASe,UAAWrD,IACtC,kBAAC,IAAD,CAAOoD,OAAK,EAACd,KAAK,YAAYe,UAAWjD,IACzC,kBAAC,IAAD,CAAOgD,OAAK,EAACd,KAAK,aAChB,kDCFUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2D,YCXN6C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9fdf4968.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nclass Login extends React.Component {\r\n  render() {\r\n    return <div>login Page</div>;\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","const apiHost = \"https://ia-sycomp-backend.herokuapp.com\";\r\n\r\nexport { apiHost };\r\n","import React from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { apiHost } from \"../../config\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass QuizPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.generateAnswers = this.generateAnswers.bind(this);\r\n    this.onChangeFile = this.onChangeFile.bind(this);\r\n  }\r\n  async componentDidMount() {\r\n    let quizData = (\r\n      await axios.get(apiHost + `/quiz/getQuiz/${this.props.match.params.id}`)\r\n    ).data;\r\n    if (!quizData.code) {\r\n      this.setState({ notFound: true });\r\n    }\r\n    quizData = quizData.quizData;\r\n    console.log(quizData);\r\n    this.setState({\r\n      quizName: quizData.quizName,\r\n      numberOfQuestions: quizData.numberOfQuestions,\r\n      answers: quizData.answers,\r\n    });\r\n  }\r\n  async onChangeFile(event) {\r\n    const file = event.target.files[0];\r\n    const index = event.target.getAttribute(\"questionNumber\");\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"questionNumber\", parseInt(index) + 1);\r\n    console.log(index);\r\n\r\n    const response = await axios.post(\r\n      apiHost + `/quiz/addAnswer/${this.props.match.params.id}`,\r\n      formData\r\n    );\r\n    let { answers } = this.state;\r\n    if (!answers.index) {\r\n      answers[index] = {};\r\n    }\r\n    answers[index].path = response.data.path;\r\n    this.setState({ answers });\r\n    console.log(response.data);\r\n  }\r\n\r\n  generateAnswers() {\r\n    const { answers, numberOfQuestions } = this.state;\r\n    let tablerows = [];\r\n    for (let i = 0; i < numberOfQuestions; i++) {\r\n      //   console.log(answers[i]);\r\n      tablerows.push(\r\n        <tr key={i}>\r\n          <td>{i + 1}</td>\r\n          <td>\r\n            {answers[i] ? (\r\n              <img src={answers[i].path} />\r\n            ) : (\r\n              <input\r\n                questionNumber={i}\r\n                type=\"File\"\r\n                ref={(el) => (this[`${i}upload`] = el)}\r\n                onChange={this.onChangeFile}\r\n                // hidden\r\n              />\r\n            )}\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n    return tablerows;\r\n  }\r\n  render() {\r\n    if (this.state.notFound) return <Redirect to=\"/notFound\"></Redirect>;\r\n    return (\r\n      <div>\r\n        <h1>{this.state.quizName}</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>S No</td>\r\n              <td>answer</td>\r\n            </tr>\r\n          </thead>\r\n          {this.generateAnswers()}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizPage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/Login/login\";\nimport QuizPage from \"./components/QuizPage/QuizPage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/quiz/:id\" component={QuizPage} />\n        <Route exact path=\"/notFound\">\n          <h1>Quiz not found</h1>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}